{"version":3,"sources":["Button/Button.js","SeasonDisplay/SeasonDisplay.js","Spinner/Spinner.js","index.js"],"names":["Button","props","react_default","a","createElement","className","onClick","onButtonClick","url","message","seasonConfig","summer","text","iconName","winter","SeasonDisplay","getSeason","lat","month","buttonClickHandler","window","open","season","this","Date","getMonth","_seasonConfig$season","concat","src_Button_Button","Component","Spinner","defaultProps","App","state","errorMessage","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_SeasonDisplay","src_Spinner_Spinner","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAuBeA,SApBA,SAAAC,GAKX,OACIC,EAAAC,EAAAC,cAAA,UACIC,UAAU,0BACVC,QAPiB,WACrBL,EAAMM,cAAcN,EAAMO,OAOrBP,EAAMQ,WCNbC,EAAe,CACjBC,OAAQ,CACJC,KAAM,0CACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,4CACNC,SAAU,cA6CHE,6MAvCXC,UAAY,SAACC,EAAKC,GACd,OAAGA,EAAQ,GAAKA,EAAQ,EACbD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,YAKpCE,mBAAqB,SAAAX,GACjBY,OAAOC,KAAKb,EAAK,mFAIjB,IAAMc,EAASC,KAAKP,UAAUO,KAAKtB,MAAMgB,KAAK,IAAIO,MAAOC,YADpDC,EAEoBhB,EAAaY,GAA/BV,EAFFc,EAEEd,KAAMC,EAFRa,EAEQb,SAEb,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAsB,OAAoBL,IAC9BpB,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAsB,OAAKd,EAAL,6BACZX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAACwB,EAAD,CACIrB,cAAegB,KAAKJ,mBACpBX,IAAI,8CACJC,QAAQ,gCAEZP,EAAAC,EAAAC,cAAA,oHAEJF,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAsB,OAAKd,EAAL,sCA/BAgB,aCdtBC,EAAU,SAAA7B,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVJ,EAAMQ,WAMvBqB,EAAQC,aAAe,CACnBtB,QAAS,cAQEqB,QChBTE,6MACFC,MAAQ,CACJhB,IAAK,KACLiB,aAAc,uFAGE,IAAAC,EAAAZ,KAChBH,OAAOgB,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAIJ,EAAKK,SAAS,CAACvB,IAAKsB,EAASE,OAAOC,YAChD,SAAAC,GAAG,OAAIR,EAAKK,SAAS,CAACN,aAAcS,EAAIlC,6CAK5C,OAAGc,KAAKU,MAAMC,eAAiBX,KAAKU,MAAMhB,IAC/Bf,EAAAC,EAAAC,cAAA,sBAAcmB,KAAKU,MAAMC,eAEhCX,KAAKU,MAAMC,cAAgBX,KAAKU,MAAMhB,IAC/Bf,EAAAC,EAAAC,cAACwC,EAAD,CAAe3B,IAAKM,KAAKU,MAAMhB,MAGnCf,EAAAC,EAAAC,cAACyC,EAAD,CAASpC,QAAQ,0CArBdoB,aAyBlBiB,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.53103ca9.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Button = props => {\n    const handlePageChange = () => {\n        props.onButtonClick(props.url)\n    }\n\n    return (\n        <button \n            className=\"ui primary button fluid\"\n            onClick={handlePageChange}>\n            {props.message}\n        </button>\n    )\n}\n\nButton.propTypes = {\n    message: PropTypes.string.isRequired,\n    onButtonClick: PropTypes.func.isRequired,\n    url: PropTypes.string.isRequired\n}\n\nexport default Button","import './SeasonDisplay.css'\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nimport Button from '../Button/Button'\n\nconst seasonConfig = {\n    summer: {\n        text: \"It is Summer time, let's hit the beach!\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: \"It is Winter time, let's prepare for ski!\",\n        iconName: 'snowflake'\n    }\n}\n\nclass SeasonDisplay extends Component{ \n    \n    getSeason = (lat, month) => {\n        if(month > 2 && month < 9){\n            return lat > 0 ? 'summer' : 'winter'\n        } else {\n            return lat > 0 ? 'winter' : 'summer'\n        }\n    \n    }\n\n    buttonClickHandler = url => {\n        window.open(url, '_blank')\n    }\n\n    render() {\n        const season = this.getSeason(this.props.lat, new Date().getMonth())\n        const {text, iconName} = seasonConfig[season]\n\n        return (\n            <div className={`season-display ${season}`}>\n                <i className={`${iconName} icon-left icon massive`}></i>\n                <div className=\"season-content\">\n                    <h1>{text}</h1>\n                    <Button \n                        onButtonClick={this.buttonClickHandler}\n                        url=\"https://github.com/AnnaVih/simpleSeasonsApp\"\n                        message=\"Check source code on GitHub\"\n                    />\n                    <p>Developed in React by Anna Vihrogonova. It is a result of hard work, passion and learning from failure</p>\n                </div>\n                <i className={`${iconName} icon-right icon massive`}></i>\n            </div>\n        )\n    }\n}\n\nSeasonDisplay.propTypes = {\n    lat: PropTypes.number.isRequired\n}\n\nexport default SeasonDisplay","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Spinner = props => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    )\n}\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n}\n\n\nSpinner.propTypes = {\n    message: PropTypes.string\n}\n\nexport default Spinner","import React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\n\nimport SeasonDisplay from './SeasonDisplay/SeasonDisplay';\nimport Spinner from './Spinner/Spinner'\n\nclass App extends Component {\n    state = {\n        lat: null,\n        errorMessage: ''\n    }\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({lat: position.coords.latitude}),\n            err => this.setState({errorMessage: err.message})\n        );\n    }\n\n    render() {\n        if(this.state.errorMessage && !this.state.lat){\n            return <div> Error: {this.state.errorMessage}</div>\n        }\n        if(!this.state.errorMessage && this.state.lat){\n            return <SeasonDisplay lat={this.state.lat}/>\n        }\n\n        return <Spinner message=\"Please accept location request\"/>\n    }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"))"],"sourceRoot":""}